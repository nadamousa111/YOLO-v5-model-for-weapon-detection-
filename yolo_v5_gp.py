# -*- coding: utf-8 -*-
"""YOLO_V5_GP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12E-AHe0wUKAeFueccAGzCqI15V39TeYQ
"""

# Commented out IPython magic to ensure Python compatibility.
#Clone the YOLO_V5  from GitHub and its libraries and roboflow to apply yolov5.
!git clone https://github.com/ultralytics/yolov5
# %cd yolov5
# %pip install -r requirements.txt
# %pip install -q roboflow

import torch
import os
from IPython.display import Image, clear_output

print(f"Setup complete. Using torch {torch.__version__} ({torch.cuda.get_device_properties(0).name if torch.cuda.is_available() else 'CPU'})")

#Create a new instance of the Roboflow class, passing in an my private API key and the format of yolo.
from roboflow import Roboflow
api_key = "eDABWTiByXQp2MWKlj8H"
rf = Roboflow(api_key=api_key, model_format="yolov5", notebook="ultralytics")

#Set an environment variable called DATASET_DIRECTORY to specify where the dataset will be stored.
os.environ["DATASET_DIRECTORY"]="/content/dataset"

from roboflow import Roboflow
rf = Roboflow(api_key="eDABWTiByXQp2MWKlj8H")
project = rf.workspace("gg-us5hv").project("weapons-5")
dataset = project.version(1).download("yolov5")

#Run the train.py script from the yolov5 repository, passing in various options including the image size,
#number of epochs, location of the data file, starting weights file, and whether to use caching.

!python train.py --img 416  --epochs 100 --data {dataset.location}/data.yaml --weights yolov5s.pt --cache

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard
# %tensorboard --logdir runs

#Run the detect.py script from the yolov5 repository, passing in various options including the location of the weights file,
#image size, confidence threshold, and source directory for the images to detect objects in.
!python detect.py --weights /content/yolov5/runs/train/exp3/weights/best.pt --img 416 --conf 0.6 --source {dataset.location}/valid/images

import glob
from IPython.display import Image, display

#display the results Images with boundry boxes around detected objects.
for imageName in glob.glob('/content/yolov5/runs/detect/exp3/*.jpg'):
    display(Image(filename=imageName))
    print("\n")